// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NplayBackend.Data;

#nullable disable

namespace NplayBackend.Data.Migrations
{
    [DbContext(typeof(NplayDbContext))]
    [Migration("20240903233813_AddSeedData")]
    partial class AddSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NPlay.Data.Enitites.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("NplayBackend.Data.Entities.SimpleChords", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<string>("Bridge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Chorus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChorusEnd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Intro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Outro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreChorus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SongId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Verse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerseEnd")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SongId");

                    b.ToTable("SimpleChords");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e9c2c7ab-3e93-4fb3-b0a7-36bfb6e70df1"),
                            Approved = true,
                            Chorus = "[\"9\\u002Bm\",\"5\\u002B\",\"0\\u002B\",\"7\\u002B\"]",
                            SongId = new Guid("93c46f97-0fd3-4d58-9875-72417acf0924"),
                            Verse = "[\"0\\u002B\",\"9\\u002Bm\",\"5\\u002B\",\"7\\u002B\"]"
                        },
                        new
                        {
                            Id = new Guid("23a5d7e5-9c9d-4f3c-84b2-4f2e10a2e03a"),
                            Approved = true,
                            Bridge = "[\"9\\u002Bm\",\"5\\u002B\",\"0\\u002B\",\"7\\u002B\"]",
                            Chorus = "[\"0\\u002B\",\"5\\u002B\",\"9\\u002Bm\",\"7\\u002B\"]",
                            PreChorus = "[\"5\\u002B\",\"7\\u002B\",\"0\\u002B\",\"5\\u002B\",\"7\\u002B\",\"0\\u002B\",\"5\\u002B\",\"7\\u002B\"]",
                            SongId = new Guid("591aead4-1d88-4366-bfac-5f67f3fc1695"),
                            Verse = "[\"0\\u002B\",\"5\\u002B\",\"9\\u002Bm\",\"7\\u002B\"]"
                        },
                        new
                        {
                            Id = new Guid("a1f5c3d1-8b2a-4e2a-a7c8-83716c1d8cb8"),
                            Approved = true,
                            Chorus = "[\"9\\u002Bm\",\"5\\u002B\",\"0\\u002B\",\"7\\u002B\"]",
                            SongId = new Guid("f4b3b3b4-1d88-4366-bfac-5f67f3fc1695"),
                            Verse = "[\"9\\u002Bm\",\"5\\u002B\",\"0\\u002B\",\"7\\u002B\"]"
                        },
                        new
                        {
                            Id = new Guid("95f6d2f4-9eb2-4e17-a5ea-d65c7ed1b6b2"),
                            Approved = true,
                            Chorus = "[\"0\\u002B\",\"7\\u002B\",\"2\\u002Bm\",\"5\\u002B\"]",
                            ChorusEnd = "[\"7\\u002B\"]",
                            PreChorus = "[\"7\\u002B\",\"5\\u002B\",\"7\\u002B\",\"5\\u002B\",\"7\\u002B\"]",
                            SongId = new Guid("b63b2c08-f150-4bb8-a702-7805194e64eb"),
                            Verse = "[\"9\\u002Bm\",\"7\\u002B\",\"5\\u002B\"]"
                        },
                        new
                        {
                            Id = new Guid("d9e73f0a-89ba-4b8b-9d2c-3e537d2d7ea5"),
                            Approved = true,
                            Chorus = "[\"0\\u002B\",\"9\\u002Bm7\",\"5\\u002B\",\"7\\u002B\"]",
                            ChorusEnd = "[\"9\\u002Bm\",\"7\\u002B\",\"5\\u002B\",\"0\\u002B\",\"5\\u002B\",\"7\\u002B\",\"0\\u002B\"]",
                            PreChorus = "[\"2\\u002Bm\",\"7\\u002B\",\"0\\u002B\",\"2\\u002Bm\",\"7\\u002B\",\"2\\u002Bm\",\"7\\u002B\",\"9\\u002Bm\",\"2\\u002Bm\",\"7\\u002B\"]",
                            SongId = new Guid("747a77ac-4a1a-4a96-957b-6c37136b3fb2"),
                            Verse = "[\"0\\u002B\",\"9\\u002Bm7\",\"5\\u002B\",\"7\\u002B\"]"
                        },
                        new
                        {
                            Id = new Guid("3a69d00e-91f4-4a91-9298-6e5786a1f5e3"),
                            Approved = true,
                            Chorus = "[\"0\\u002B\",\"9\\u002Bm\",\"5\\u002B\",\"7\\u002B\"]",
                            SongId = new Guid("fedd2b44-d9ea-47e4-817c-cd924aacf935"),
                            Verse = "[\"0\\u002B\",\"9\\u002Bm\",\"5\\u002B\",\"7\\u002B\"]"
                        });
                });

            modelBuilder.Entity("NplayBackend.Data.Entities.Song", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BPM")
                        .HasColumnType("int");

                    b.Property<int>("Chroma")
                        .HasColumnType("int");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Recognitions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scale")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpotifyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YoutubeCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Songs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("93c46f97-0fd3-4d58-9875-72417acf0924"),
                            Approved = true,
                            Artist = "Ed Sheeran",
                            Chroma = 8,
                            Difficulty = 1,
                            Scale = "G#",
                            SpotifyCode = "spotify:track:0tgVpDi06FyKpA1z0VMD4v",
                            Title = "Perfect",
                            YoutubeCode = "2Vv-BfVoq4g"
                        },
                        new
                        {
                            Id = new Guid("591aead4-1d88-4366-bfac-5f67f3fc1695"),
                            Approved = true,
                            Artist = "Ed Sheeran",
                            Chroma = 2,
                            Difficulty = 1,
                            Scale = "D",
                            SpotifyCode = "spotify:track:6PCUP3dWmTjcTtXY02oFdT",
                            Title = "Castle on the Hill",
                            YoutubeCode = "K0ibBPhiaG0"
                        },
                        new
                        {
                            Id = new Guid("f4b3b3b4-1d88-4366-bfac-5f67f3fc1695"),
                            Approved = true,
                            Artist = "Ed Sheeran",
                            Chroma = 2,
                            Difficulty = 0,
                            Scale = "D",
                            SpotifyCode = "spotify:track:50nfwKoDiSYg8zOCREWAm5",
                            Title = "Shivers",
                            YoutubeCode = "Il0S8BoucSA"
                        },
                        new
                        {
                            Id = new Guid("b63b2c08-f150-4bb8-a702-7805194e64eb"),
                            Approved = true,
                            Artist = "Ed Sheeran",
                            Chroma = 0,
                            Difficulty = 1,
                            Scale = "C",
                            SpotifyCode = "spotify:track:4btFHqumCO31GksfuBLLv3",
                            Title = "Overpass Graffiti",
                            YoutubeCode = "k6ZoE4RrcDs"
                        },
                        new
                        {
                            Id = new Guid("747a77ac-4a1a-4a96-957b-6c37136b3fb2"),
                            Approved = true,
                            Artist = "Ed Sheeran",
                            Chroma = 1,
                            Difficulty = 2,
                            Scale = "D",
                            SpotifyCode = "spotify:track:34gCuhDGsG4bRPIf9bb02f",
                            Title = "Thinking Out Loud",
                            YoutubeCode = "34gCuhDGsG4bRPIf9bb02f"
                        },
                        new
                        {
                            Id = new Guid("7c5ecbd8-5a76-4eb5-984c-a3bc90be5244"),
                            Approved = true,
                            Artist = "Ed Sheeran",
                            Chroma = 2,
                            Difficulty = 1,
                            Scale = "E",
                            SpotifyCode = "spotify:track:7qiZfU4dY1lWllzX7mPBI3",
                            Title = "Shape of You"
                        },
                        new
                        {
                            Id = new Guid("ce6e5559-4d14-442c-8490-c3e415d5420a"),
                            Approved = true,
                            Artist = "Ed Sheeran",
                            Chroma = 2,
                            Difficulty = 1,
                            Scale = "F",
                            SpotifyCode = "spotify:track:1HNkqx9Ahdgi1Ixy2xkKkL",
                            Title = "Photograph"
                        },
                        new
                        {
                            Id = new Guid("fedd2b44-d9ea-47e4-817c-cd924aacf935"),
                            Approved = true,
                            Artist = "Ed Sheeran & Justin Bieber",
                            Chroma = 2,
                            Difficulty = 0,
                            Scale = "F#",
                            SpotifyCode = "spotify:track:3HVWdVOQ0ZA45FuZGSfvns",
                            Title = "I don't care",
                            YoutubeCode = "y83x7MgzWOA"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NPlay.Data.Enitites.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NPlay.Data.Enitites.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NPlay.Data.Enitites.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NPlay.Data.Enitites.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NplayBackend.Data.Entities.SimpleChords", b =>
                {
                    b.HasOne("NplayBackend.Data.Entities.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");
                });
#pragma warning restore 612, 618
        }
    }
}
